<%
unless defined? tree_list_block_class
  tree_list_block_class = ''
end

%>
<div class="ref-data-protocol-events">
  <% unless @protocol_tree_list_no_help %>
      <p><a class="glyphicon glyphicon-info-sign" href="#p-help" class="collapsed" data-toggle="collapse"></a></p>
      <div class="help-block collapse" id="p-help">
        <p>
        Protocol: ml_app.protocols<br/> 
        Status: ml_app.sub_processes<br/> 
        Method: ml_app.protocol_events
        </p>
        <p>
          Use a protocol, status or method lookup directly against a master record. For example, to find a player who has ever had a status of 144 or 24:
        </p>
        <p><code>
            select distinct pi.* from player_infos pi inner join tracker_history th on th.master_id = pi.master_id<br />
            where sub_process in (144, 24);
          </code></p>
        <p>Since each status (sub_process) for a tracker / tracker history record belongs to a specific protocol, there is no need to explicitly state the protocol_id for simple matches.</p>
        <p>Similarly, since each method (protocol_event) for a tracker / tracker history record belongs to a specific sub_process and subsequently protocol, there is no need to explicitly state the protocol_id or sub_process_id for simple matches.</p>
        <p>When using the attributes definer to create a search form, select the <strong>type</strong> as 'tracker protocol', 'tracker status (sub process) or 'tracker method (protocol event)'. The appropriate set of selections (tracker methods for example) will be automatically presented in a drop down or multiple selection field, based on the selection for <strong>single or multiple values</strong>.</p>
        <p>Reference the user selection in SQL using the name of the field, prefixed with a colon. For example, when the attribute <strong>name</strong> <code>must_have_protocol</code> is entered, use:</p>
        <p><code>
            select * from tracker_history where protocol_id in (:must_have_protocol)
          </code></p>

      </div>
<% end %>
      <div class="<%=tree_list_block_class%>">
      <ul id="protocols-list" style="overflow: auto; background-color: white;">
        <% 
        pid = @filter_protocol_tree_list&.dig(:protocol_id)
        protocols = Classification::Protocol.all
        protocols = protocols.where(id: pid) if pid
        
        init_collapsed = pid ? '' : 'collapsed'
        init_collapse = pid ? 'collapse in' : 'collapse'

        protocols.sort.each do |p| %>
        <li id="protocol-<%=p.id%>" class="protocols-list--protocol">
          <a href="#pblock-<%=p.id%>" data-toggle="collapse" class="<%=init_collapsed%>" style="color: <%= p.disabled ? '#aaa' : 'auto' %>"><span><%=p.id%></span> <strong><%= p.name %></strong></a>
        </li>
        <ul id="pblock-<%=p.id%>" class="<%=init_collapse%>">
          <% 
          sid = @filter_protocol_tree_list&.dig(:sub_process_id)
          sub_processes = p.sub_processes.all
          sub_processes = sub_processes.where(id: sid) if sid
          sub_processes.each do |sp| %>
          <li style="color: <%= p.disabled || sp.disabled ? '#aaa' : 'auto' %>" data-protocol-id="<%=p.id%>" id="sub_process-<%=sp.id%>" class="protocols-list--sub-process"><span><%=sp.id%></span> <strong><%= sp.name %></strong></li>
          <ul>
            <% sp.protocol_events.all.each do |pe| %>
            <li style="color: <%= p.disabled || sp.disabled || pe.disabled ? '#aaa' : 'auto' %>" data-sub-process-id="<%=sp.id%>" id="protocol_event-<%=sp.id%>" class="protocols-list--event"><span><%=pe.id%></span> <strong><%= pe.name %></strong></li>
            <% end %>
          </ul>
          <% end %>
        </ul>
        <% end %>
      </ul>
    </div>
</div>