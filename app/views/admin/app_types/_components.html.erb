<%
  unless defined? main_components
    main_components = nil
  end
  
  exclude_components = %i[associated_sub_processes associated_protocol_events]

  options = {main_components: , exclude_components: }

  unless defined? open_in_new
    open_in_new = false
  end

  active_or_all = 'active'

  alt_names = {
    general_selections: ['item_type'],
    user_access_controls: ['resource_type', 'role_name'],
    user_roles: ['role_name'],
    app_configurations: ['name'],
    sub_processes: ['protocol_name'],
    protocol_events: ['protocol_name']
  }

  split_ns = {
    general_selections: '__'
  }

  alt_links = alt_names.dup
%>
<div class="admin-panel-components" id="admin-panel-components">
  <div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">
    <% 
    admin_app_type.as_json(options).first.last.each do |k, v_hash|        
      v_class = nil
      if v_hash.respond_to?(:each) 
        kclean = k.gsub(/^valid_|associated_/i, '').to_sym
        title = k.humanize.gsub(/^valid |associated /i, '').titleize
        title_hyph = title.id_hyphenate
        init_link_class = 'collapsed'
        init_panel_class = ''
      %>
    <div class="panel panel-default">
      <div class="panel-heading" role="tab" id="<%="app-type-component-heading--#{title_hyph}"%>">
        <%
        v_class = v_hash.first['_class_name'].constantize if v_hash.first
        if v_class
          class_rn = v_class.resource_name 
          base_path = Resources::Models.find_by(resource_name: class_rn)&.dig(:base_route_name)&.pluralize
          path = send("#{base_path}_path", filter: {ids: v_hash.map{|v| v['id'] }} )
        else
          begin
            base_path = "admin_#{k.gsub(/^associated_/, '')}"
            path = send("#{base_path}_path", filter: {ids: v_hash.map{|v| v['id'] }})
          rescue StandardError => e
            logger.warn "Failed to get path for admin component #{k}"
          end 
        end %>
        <h3 class="panel-title">
          <%= link_to title, "#app-type-components-#{title_hyph}", 
              role: "button", 
              data: { toggle: "collapse", parent: "#accordion" }, 
              'aria-expanded' =>"true",
              'aria-controls'=>"#app-type-components-#{title_hyph}",
              class: init_link_class %> 
          <%= link_to '', path, class: 'glyphicon glyphicon-expand' %>
        </h3>
      </div>
      <div id="<%="app-type-components-#{title_hyph}"%>" class="panel-collapse collapse <%=init_panel_class%>" role="tabpanel" aria-labelledby="<%="app-type-component-heading-#{title_hyph}"%>">
        <div class="panel-body">
          <ul>
          <%
            constants = {}
            results = {}
            all_vs = {}
            v_hash.map do |k2_hash|
              k2_cn = k2_hash['_class_name']
              k2_const = constants[k2_cn] ||= k2_cn.constantize
              k2_all = results["#{k2_cn}--all"] ||= k2_const.send(active_or_all)
              k2_id = k2_hash['id']
              next unless k2_id

              k2 = k2_all.find { |r| r && r['id'] == k2_id }
              next unless k2

              rn = k2.respond_to?(:alt_resource_name) && k2.alt_resource_name
              rn ||= k2.respond_to?(:resource_name) && k2.resource_name
              path = if alt_links[kclean]
                       fs = alt_links[kclean].map {|l| [l, k2[l]]}.to_h
                       send("#{base_path}_path", filter: fs)
                     else
                       send("#{base_path}_path", filter: {id: k2.id})
                     end
              
              pair = if alt_names[kclean]
                       alt_names[kclean].map {|ka| k2[ka] || k2.send(ka) }
                     elsif k2.respond_to?(:name) && k2.respond_to?(:category)
                       [k2.category.presence || '(no category)', k2.name]
                      elsif k2.respond_to?(:name)
                       [nil, k2.name]
                     else
                       [nil, rn]
                     end
              loc = pair.first.to_s
              name = pair.last.to_s.presence || '(not specified)'
              loc = '' if alt_names[kclean] && loc == name
              sns = split_ns[kclean]            
              if sns
                loc, name = name.split(sns) 
                if name.blank?
                  name = loc
                  loc = ''
                end
              end
                
              all_vs[loc] ||= []
              all_vs[loc] << { path: path, loc: loc, name: name, pair: pair, disabled: k2.disabled }
            end 
          %>
          <% all_vs.keys.sort.each do |loc| %>          

          <% unless loc == '' %><li class="app-component-loc"><%= loc %></li><ul class="app-components-for-loc"><% end %>          
          <%
            got_path = {}
            all_vs[loc].each.sort {|a, b| a[:name] <=> b[:name]}.uniq.each do |vs|
              next if vs[:disabled]

              path = vs[:path]
              next if got_path[path]

              got_path[path] = true

              tabid = vs[:pair]&.join('--').ns_underscore
          %>
              <li class="app-component-name">
                <% if open_in_new %>              
                <%= link_to link_label_open_in_new(vs[:name]), path, target: "adminres-#{tabid}", class: "link-#{vs[:disabled] ? 'disabled' : 'active'}" %>
                <% else %>
                <%= link_to vs[:name], path, class: "link-#{vs[:disabled] ? 'disabled' : 'active'}" %>
                <%= link_to link_label_open_in_new(''), path, target: "adminres-#{tabid}", class: "link-#{vs[:disabled] ? 'disabled' : 'active'}" %>
                <% end %>
              </li>
          <% end %>
          <% unless loc == '' %></ul><% end %>
          <% end %>
          </ul>
        </div>
      </div>
    </div>
    <% 
      end 
    end 
    %>
  
  </div>
    
</div>
