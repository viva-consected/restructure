<% if object_instance.persisted? && object_instance.enabled?%>
<div class="al-details-section">
  <% unless object_instance.implementation_class_defined?(::ActivityLog, fail_without_exception: true) %>
    <label>implementation class not ready</label>
    <p>Using this definition will fail</p>
  <% end %>

  <label>item type name</label>
  <p class="al-item-type">
  <code><%= object_instance.full_item_type_name %></code>
  </p>

  <label>resource name</label>
  <p class="al-resource-name">
  <code><%= object_instance.resource_name %></code>
  </p>

  <label>database <%= object_instance.table_or_view || '<span class="info-danger">not defined</span>'.html_safe %></label>
  <p>
    <code><%= [object_instance.schema_name, object_instance.table_name].compact.join('.') %></code>
  </p>
  <p>
    <%= link_to link_label_open_in_new('search data'), 
                "/reports/reference_data__table_data?schema_name=#{object_instance.schema_name}&search_attrs%5B_blank%5D=true&search_attrs%5Bno_run%5D=true&table_name=#{object_instance.table_name}", 
                target: '_blank' %>
  </p>

  <%= render partial: 'admin/dynamic_models/est_record_count' %>
  <%= render partial: 'admin/dynamic_models/check_tracker_updates' %>

  <% unless object_instance.table_or_view_ready?%>
  <div class="help-block">
  <p>Typically the database table or view associated with an activity log is created when the definition is first created (or prior to this if handled manually.)</p>
  <p>To create the table for this activity log definition, either run the defined migration, or disable (and save) then re-enable and save this definition to 
     setup the database table based on options configuration.
  </p>
  </div>
  <% end %>

  <% 
  ces = OptionConfigs::ExtraOptions.all_option_configs_notices(object_instance.option_configs)
  if ces %>
  <label>configuration errors</label>
    <div class="config-error-block">

      <% ces.each do |ce| %>
          <div>
            <h4><span class="activity-list-name"><%= ce[:name] %></span> - <%= ce[:type] %></h4>
            <p><%= ce[:message] %></p>
            <pre><%= ce[:config_def].to_yaml.sub("---\n",'') %></pre>
          </div>
      <% end %>
    </div>
  <% end %>
</div>
<div class="activity-list-section">
  <label>activities</label>
  <p>Add a new <code>[activity_name]:</code> underscored activity name without indentation.</p>
  <p>Click an activity name from the list below to jump to its definition. Each activity shown lists the fields defined for it.<br/>&nbsp;</p>
  <ul class="activity-list">
  <% object_instance.option_configs_names&.each do |name| 
       conf = object_instance.option_type_config_for(name)

       next if name.in?([:primary, :blank_log]) && !conf&.fields&.present?
  %>
    <li class="activity-list-name"><%=name%><% unless conf %>(invalid)<% end %></li>
      <% if conf&.label&.present?  %>
      <div class="activity-list-activity-label"><%= conf.label %></div>
      <% end %>
      <% if conf&.fields&.present?  %>
      <ul class="activity-list-activity-fields">
        <li><%= conf.fields.join("</li> <li>").html_safe %></li>
      </ul>
      <% end %>
      <% ref_def = conf&.embed
         if ref_def&.present?  
            got = ref_def.dig(:resource_model_def, :resource_item_name)
      %>
      <ul class="activity-list-activity-embed">
        <%= render partial: 'admin/activity_logs/def_embed_info', locals: {resource_item_name: got, ref_def:} %>
      </ul>
      <% end %>
      <% act_refs = conf&.references
         if act_refs&.present?  
         %>
           <ul class="activity-list-activity-references">
         <%
              object_instance.referenced_table_def(act_refs)&.each do |ref_def|
                full_ref_name = ref_def[:full_ref_name]
         %>
          <%= render partial: 'admin/activity_logs/def_references_info', locals: {full_ref_name: full_ref_name, ref_def:} %>
              <% end %>
          </ul>
      <% end %>
      <ul class="activity-list-activity-uacs">
        <%= render partial: 'admin/activity_logs/def_activity_uac_info', locals: {app_type_id: current_admin.matching_user&.app_type_id, resource_name: conf.resource_name} %>
      </ul>

  <% end %>
  </ul>
  <div id="activity-list-detail" class="activity-list-detail"></div>
</div>

<div class="activity-list-all-fields">
  <label>all fields</label>
  <p>Set of all fields aggregated from all activities.</p>
  <p class="al-field-list">
  <ul class="activity-list">
    <li><%= object_instance.all_implementation_fields
              .reject{|f| f.index(/^placeholder_|^embedded_report_/)}
              .join("</li> <li>")
              .html_safe %></li>
  </ul>
  </p>
</div>

<%= render partial: 'admin/common_templates/def_details_libraries', locals: {object_instance: object_instance} %>
<%= render partial: 'admin/common_templates/def_details_dialogs', locals: {object_instance: object_instance} %>

<div class="activity-list-embeds">
  <label>embeds</label>
  <p>Add <code>embed:</code> configurations to directly embed another dynamic definition. This uses database joins, 
  rather than an intermediate model references to access embedded records.</p>
  <ul class="al-reference-list al-embed-list">
  <% shown_refs = []
     object_instance.all_direct_embed_tables.each do |ref_def| 
  
      got = ref_def.dig(:resource_model_def, :resource_item_name)
      unless shown_refs.include?(got)
        shown_refs << got
    %>
    <%= render partial: 'admin/activity_logs/def_embed_info', locals: {resource_item_name: got, ref_def:, show_table: true} %>
    <%  end %>
  <% end %>
  </ul>
</div>

<div class="activity-list-references">
  <label>references</label>
  <p>Add <code>references:</code> configurations to connect to other dynamic definitions. This connects through
  an intermediate `model_references` database table, allowing arbitrary connections to be made between records.</p>
  
  <ul class="al-reference-list">
  <% shown_refs = []
     object_instance.all_referenced_tables.each do |ref_def| 
  %>
  <%  full_ref_name = ref_def[:full_ref_name]
      unless shown_refs.include?(full_ref_name)
        shown_refs << full_ref_name
  %>
    <%= render partial: 'admin/activity_logs/def_references_info', locals: {full_ref_name: full_ref_name, ref_def:, show_table: true} %>
    <%  end %>
  <% end %>
  </ul>
</div>

<div class="activity-list-file-filters">
  <label>file filters</label>
  <p>File containers use file filters to define which filenames can be viewed for a specific activity or default configuration.</p>
  <p>
  <%= link_to(link_label_open_in_new("edit"),
        admin_nfs_store_filter_filters_path(filter: {resource_name: "#{object_instance.full_item_type_name}__%"}),
        target: '_blank'
  )
  %>
  </p>
</div>
<% else %>
  <label>not yet saved</label>
<% end %>
